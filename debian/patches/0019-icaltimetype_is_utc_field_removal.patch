From: Ken Murchison <murch@andrew.cmu.edu>
Date: Sat, 21 Oct 2017 19:04:08 -0400
Subject: [PATCH] Account for the removal of icaltimetype.is_utc field in
 upcoming libical

---
 Makefile.am            |  4 ++++
 configure.ac           |  5 +++++
 imap/http_caldav.c     |  2 +-
 imap/http_timezone.c   | 22 +++++++++++-----------
 imap/ical_support.c    | 11 +++++++++++
 imap/ical_support.h    |  6 ++++++
 imap/xcal.c            |  4 ++--
 tools/vzic/test-vzic.c |  2 +-
 8 files changed, 41 insertions(+), 15 deletions(-)
 create mode 100644 imap/ical_support.c
 create mode 100644 imap/ical_support.h

diff --git a/Makefile.am b/Makefile.am
index a10ad76..cb3c347 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -968,6 +968,8 @@ imap_libcyrus_imap_la_SOURCES += \
 	imap/http_timezone.c \
 	imap/httpd.c \
 	imap/httpd.h \
+	imap/ical_support.c \
+	imap/ical_support.h \
 	imap/jcal.c \
 	imap/jcal.h \
 	imap/json_support.h \
@@ -1075,6 +1077,8 @@ imap_httpd_SOURCES = \
 	imap/http_rss.c \
 	imap/http_timezone.c \
 	imap/httpd.c \
+	imap/ical_support.c \
+	imap/ical_support.h \
 	imap/jcal.c \
 	imap/json_support.h \
 	imap/mutex_fake.c \
diff --git a/configure.ac b/configure.ac
index 1d321d1..1ecb317 100644
--- a/configure.ac
+++ b/configure.ac
@@ -1268,6 +1268,11 @@ dnl
 		    AC_DEFINE(HAVE_RSCALE,[], [Build RSCALE support into httpd?]))
 	fi
 
+	AC_CHECK_MEMBER(icaltimetype.is_utc,
+		AC_DEFINE(ICALTIME_HAS_IS_UTC,[],
+			[Does icaltimetype have is_utc field?]),
+			 [], [#include <libical/ical.h>])
+
 	LIBS="${saved_LIBS}"
 	CPPFLAGS="${saved_CPPFLAGS}"
 fi
diff --git a/imap/http_caldav.c b/imap/http_caldav.c
index ce0b094..6ebe529 100644
--- a/imap/http_caldav.c
+++ b/imap/http_caldav.c
@@ -2023,7 +2023,7 @@ static struct icaltimetype icaltime_from_rfc3339_string(const char *str)
 	goto fail;
     }
 
-    tt.is_utc = 1;
+    icaltime_set_utc(&tt, 1);
     return tt;
 
   fail:
diff --git a/imap/http_timezone.c b/imap/http_timezone.c
index 9b12069..6590f56 100644
--- a/imap/http_timezone.c
+++ b/imap/http_timezone.c
@@ -388,7 +388,7 @@ static int action_list(struct transaction_t *txn)
 	param = hash_lookup("changedsince", &txn->req_qparams);
 	if (param) {
 	    changedsince = icaltime_from_string(param->s);
-	    if (param->next || !changedsince.is_utc) {  /* once only, UTC */
+	    if (param->next || !icaltime_is_utc(changedsince)) {  /* once only, UTC */
 		return json_error_response(txn, TZ_INVALID_CHANGEDSINCE,
 					   param, &changedsince);
 	    }
@@ -396,7 +396,7 @@ static int action_list(struct transaction_t *txn)
 
 	name = hash_lookup("tzid", &txn->req_qparams);
 	if (name) {
-	    if (changedsince.is_utc) {
+	    if (icaltime_is_utc(changedsince)) {
 		return json_error_response(txn, TZ_INVALID_TZID,
 					   param, &changedsince);
 	    }
@@ -589,7 +589,7 @@ static const struct observance *truncate_vtimezone(icalcomponent *vtz,
 
 	/* Adjust DTSTART observance to UTC */
 	icaltime_adjust(&obs.onset, 0, 0, 0, -obs.offset_from);
-	obs.onset.is_utc = 1;
+	icaltime_set_utc(&obs.onset, 1);
 
 	/* Check DTSTART vs window close */
 	if (!icaltime_is_null_time(end) &&
@@ -651,7 +651,7 @@ static const struct observance *truncate_vtimezone(icalcomponent *vtz,
 		if (!infinite) {
 		    /* Adjust UNTIL to local time (for iterator) */
 		    icaltime_adjust(&rrule.until, 0, 0, 0, obs.offset_from);
-		    rrule.until.is_utc = 0;
+		    icaltime_set_utc(&rrule.until, 0);
 		}
 
 		if (trunc_dtstart) {
@@ -675,7 +675,7 @@ static const struct observance *truncate_vtimezone(icalcomponent *vtz,
 
 		    /* Adjust observance to UTC */
 		    icaltime_adjust(&obs.onset, 0, 0, 0, -obs.offset_from);
-		    obs.onset.is_utc = 1;
+		    icaltime_set_utc(&obs.onset, 1);
 
 		    if (trunc_until && icaltime_compare(obs.onset, end) > 0) {
 			/* Observance is on/after window close */
@@ -776,7 +776,7 @@ static const struct observance *truncate_vtimezone(icalcomponent *vtz,
 
 	    /* Adjust observance to UTC */
 	    icaltime_adjust(&obs.onset, 0, 0, 0, -obs.offset_from);
-	    obs.onset.is_utc = 1;
+	    icaltime_set_utc(&obs.onset, 1);
 
 	    if (!icaltime_is_null_time(end) &&
 		icaltime_compare(obs.onset, end) >= 0) {
@@ -880,7 +880,7 @@ static const struct observance *truncate_vtimezone(icalcomponent *vtz,
 	    case ICAL_DTSTART_PROPERTY:
 		/* Adjust window open to local time */
 		icaltime_adjust(&start, 0, 0, 0, tombstone.offset_from);
-		start.is_utc = 0;
+		icaltime_set_utc(&start, 0);
 
 		icalproperty_set_dtstart(prop, start);
 		break;
@@ -1160,7 +1160,7 @@ static int action_expand(struct transaction_t *txn)
     param = hash_lookup("changedsince", &txn->req_qparams);
     if (param) {
 	changedsince = icaltime_from_string(param->s);
-	if (param->next || !changedsince.is_utc) {  /* once only, UTC */
+	if (param->next || !icaltime_is_utc(changedsince)) {  /* once only, UTC */
 	    return json_error_response(txn, TZ_INVALID_CHANGEDSINCE,
 				       param, &changedsince);
 	}
@@ -1171,13 +1171,13 @@ static int action_expand(struct transaction_t *txn)
 	return json_error_response(txn, TZ_INVALID_START, param, NULL);
 
     start = icaltime_from_string(param->s);
-    if (!start.is_utc)  /* MUST be UTC */
+    if (!icaltime_is_utc(start))  /* MUST be UTC */
 	return json_error_response(txn, TZ_INVALID_START, param, &start);
 
     param = hash_lookup("end", &txn->req_qparams);
     if (param) {
 	end = icaltime_from_string(param->s);
-	if (param->next || !end.is_utc  /* once only, UTC */
+	if (param->next || !icaltime_is_utc(end)  /* once only, UTC */
 	    || icaltime_compare(end, start) <= 0) {  /* end MUST be > start */
 	    return json_error_response(txn, TZ_INVALID_END, param, &end);
 	}
@@ -1435,7 +1435,7 @@ static int json_error_response(struct transaction_t *txn, long tz_code,
     else if (param->next) fmt = "multiple %s parameters";
     else if (!param->s || !param->s[0]) fmt = "missing %s value";
     else if (!time) fmt = "unknown %s value";
-    else if (!time->is_utc) fmt = "invalid %s UTC value";
+    else if (!icaltime_is_utc(*time)) fmt = "invalid %s UTC value";
 
     switch (tz_code) {
     case TZ_INVALID_TZID:
diff --git a/imap/ical_support.c b/imap/ical_support.c
new file mode 100644
index 0000000..95f875f
--- /dev/null
+++ b/imap/ical_support.c
@@ -0,0 +1,11 @@
+#include <config.h>
+#include <libical/ical.h>
+
+EXPORTED void icaltime_set_utc(struct icaltimetype *t, int set)
+{
+#ifdef ICALTIME_HAS_IS_UTC
+    t->is_utc = set;
+#else
+    icaltime_set_timezone(t, set ? icaltimezone_get_utc_timezone() : NULL);
+#endif
+}
diff --git a/imap/ical_support.h b/imap/ical_support.h
new file mode 100644
index 0000000..0d7de69
--- /dev/null
+++ b/imap/ical_support.h
@@ -0,0 +1,6 @@
+#ifndef INCLUDED_ICAL_SUPPORT_H
+#define INCLUDED_ICAL_SUPPORT_H
+
+extern void icaltime_set_utc(struct icaltimetype *t, int set);
+
+#endif /* INCLUDED_ICAL_SUPPORT_H */
diff --git a/imap/xcal.c b/imap/xcal.c
index b5a5b6e..df2889a 100644
--- a/imap/xcal.c
+++ b/imap/xcal.c
@@ -113,8 +113,8 @@ const char *icaltime_as_iso_string(const struct icaltimetype tt)
     static char str[21];
     const char *fmt;
 
-    if (tt.is_date) fmt = "%04d-%02d-%02d";
-    else if (tt.is_utc) fmt = "%04d-%02d-%02dT%02d:%02d:%02dZ";
+    if (icaltime_is_date(tt)) fmt = "%04d-%02d-%02d";
+    else if (icaltime_is_utc(tt)) fmt = "%04d-%02d-%02dT%02d:%02d:%02dZ";
     else fmt = "%04d-%02d-%02dT%02d:%02d:%02d";
 
     snprintf(str, sizeof(str), fmt, tt.year, tt.month, tt.day,
diff --git a/tools/vzic/test-vzic.c b/tools/vzic/test-vzic.c
index be1c630..ed52d5e 100644
--- a/tools/vzic/test-vzic.c
+++ b/tools/vzic/test-vzic.c
@@ -315,7 +315,7 @@ dump_local_times (icaltimezone *zone, FILE *fp)
   tt.hour = 0;
   tt.minute = 0;
   tt.second = 0;
-  tt.is_utc = 0;
+  icaltime_set_utc(&tt, 0);
   tt.is_date = 0;
   tt.zone = "";
 
